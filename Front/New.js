document.addEventListener("DOMContentLoaded", function () {
    console.log("üì¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
    checkAuthStatus();
    loadFavorites();
    
});


  function showSection(sectionId) {
    var section = document.getElementById(sectionId);
    if (section) {
      
      var headerOffset = 120; 
      var elementPosition = section.getBoundingClientRect().top;
      var offsetPosition = elementPosition + window.pageYOffset - headerOffset;
      window.scrollTo({
        top: offsetPosition,
        behavior: "smooth"
      });
    }
  }

// üåü –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
async function searchMedicine() {
    let query = document.getElementById('search').value.trim();
    let resultsList = document.getElementById('results');
    resultsList.innerHTML = '';

    if (!query) {
        alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞");
        return;
    }

    try {
        let response = await fetch(`/medicines/search?q=${encodeURIComponent(query)}`);

        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }

        let data = await response.json();

        if (!Array.isArray(data) || data.length === 0) {
            alert("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
            return;
        }

        data.forEach(med => {
            if (!med.id) {
                console.error("‚ùå –û—à–∏–±–∫–∞: —É –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–µ—Ç ID", med);
                return;
            }

            let li = document.createElement('li');
            li.innerHTML = `
                <img src="${med.image_url || 'https://via.placeholder.com/100'}" 
                     alt="${med.name}" 
                     style="width: 100px; height: 100px;" 
                     onerror="this.onerror=null; this.src='https://via.placeholder.com/100';">
                <p><b>${med.name}</b> - ${med.description} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${med.category}, –¶–µ–Ω–∞: $${med.price})</p>
                <button onclick="addToFavorites(${med.id})">‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</button>
            `;
            resultsList.appendChild(li);
        });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:", error);
        alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!");
    }
}
function filterByCategory() {
    var category = document.getElementById('medicine-category').value;
    if (!category) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
      return;
    }
    
    fetch('/medicines/category?category=' + encodeURIComponent(category))
      .then(response => response.json())
      .then(data => {
        const results = document.getElementById('results');
        results.innerHTML = "";
        
        if (!Array.isArray(data) || data.length === 0) {
          results.innerHTML = "<li>–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</li>";
          return;
        }
        
        data.forEach(med => {
          let li = document.createElement('li');
          li.innerHTML = `
            <img src="${med.image_url}" alt="${med.name}" style="width: 100px; height: 100px;">
            <strong>${med.name}</strong> - ${med.description}
          `;
          results.appendChild(li);
        });
      })
      .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error));
  }
  
  window.filterByCategory = filterByCategory;
  

// üåü –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function toggleModal(modalId) {
    let modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = modal.style.display === "block" ? "none" : "block";
    }
}

// üåü –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser() {
 
    let firstName = document.getElementById("first-name").value.trim();
    let lastName = document.getElementById("last-name").value.trim();
    let email = document.getElementById("email").value.trim(); 
    let phone = document.getElementById("phone").value.trim();
    let city = document.getElementById("city").value.trim();
    let password = document.getElementById("password").value.trim();
    let confirmPassword = document.getElementById("confirm-password").value.trim();
    let message = document.getElementById("message");

    
    if (!firstName || !lastName || !email || !phone || !city || !password || !confirmPassword) {
        message.textContent = "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!";
        message.style.color = "red";
        return;
    }

  
    if (!email.includes("@")) {
        message.textContent = "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª @!";
        message.style.color = "red";
        return;
    }

  
    if (password !== confirmPassword) {
        message.textContent = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!";
        message.style.color = "red";
        return;
    }

    try {
        let response = await fetch('/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                first_name: firstName,
                last_name: lastName,
                email: email,      
                phone: phone,
                city: city,
                password: password
            })
        });

        let data = await response.json();

        if (response.ok) {
            message.textContent = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!";
            message.style.color = "green";
            toggleModal('register-modal');
        } else {
            message.textContent = data.error || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!";
            message.style.color = "red";
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        message.textContent = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!";
        message.style.color = "red";
    }
}


function renderClinicCards(clinics) {
    const container = document.getElementById("clinic-cards");
    container.innerHTML = "";
  
    if (!Array.isArray(clinics) || clinics.length === 0) {
      container.innerHTML = "<p>–ö–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>";
      return;
    }
    
    clinics.forEach(clinic => {
      const card = document.createElement("div");
      card.className = "clinic-card";
      card.innerHTML = `
        <img src="${clinic.image_url}" alt="${clinic.name}">
        <div class="clinic-info">
          <h3>${clinic.name}</h3>
          <p class="address">${clinic.address}</p>
          <p class="website"><a href="${clinic.url}" target="_blank">${clinic.url}</a></p>
          <p class="description">${clinic.description}</p>
        </div>
      `;
      container.appendChild(card);
    });
  }
  
  // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–Ω–∏–∫ 
  function filterClinicsByCity() {
    const city = document.getElementById('clinic-city').value;
    if (!city) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥");
      return;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    fetch('/clinics?city=' + encodeURIComponent(city))
      .then(response => {
       
        if (!response.ok) {
          throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + response.status);
        }
        return response.json();
      })
      .then(data => {
    
        renderClinicCards(data);
      })
      .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫:", error));
  }
  
  window.filterClinicsByCity = filterClinicsByCity;
  

  document.addEventListener("DOMContentLoaded", function () {

    const city = document.getElementById('clinic-city').value;
    if (city) {
      filterClinicsByCity();
    } else {
      // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω, –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª–∏–Ω–∏–∫–∏,
      // –µ—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
      fetch('/clinics')
        .then(response => response.json())
        .then(data => renderClinicCards(data))
        .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–ª–∏–Ω–∏–∫:", error));
    }
  });
  
  
  
  

// üåü –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç
async function loginUser() {
    let loginInput = document.getElementById("login-input")?.value.trim();
    let password = document.getElementById("login-password")?.value.trim();
    let message = document.getElementById("login-message");

    if (!loginInput || !password) {
        message.textContent = "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!";
        message.style.color = "red";
        return;
    }

    try {
        let response = await fetch('/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ login: loginInput, password })
        });

        let data = await response.json();
        console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (login):", data);

        if (response.ok && data.user_id) {
            localStorage.setItem("user_id", data.user_id);
            console.log("User id —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", localStorage.getItem("user_id"));
            message.textContent = "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!";
            message.style.color = "green";
            toggleModal('login-modal');
            checkAuthStatus();
            loadFavorites();
        } else {
            message.textContent = data.error || "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!";
            message.style.color = "red";
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
        message.textContent = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!";
        message.style.color = "red";
    }
}


// üåü –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
async function addToFavorites(medicineId) {
    let userId = localStorage.getItem("user_id");

    if (!userId) {
        alert("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!");
        return;
    }

    try {
        let response = await fetch('/favorites', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: parseInt(userId), medicine_id: parseInt(medicineId) })
        });

        let data = await response.json();
        alert(data.message);
        loadFavorites();
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:", error);
        alert("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
    }
}




//  –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
function logoutUser() {
    localStorage.removeItem("user_id");
    alert("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!");
    checkAuthStatus();
    location.reload();
}



async function loadFavorites() {
    let userId = localStorage.getItem("user_id");
    let favoritesList = document.getElementById("favorites-list");

    if (!userId || !favoritesList) {
        favoritesList.innerHTML = "<p>–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.</p>";
        return;
    }

    try {
        let response = await fetch(`/favorites?user_id=${userId}`);
        let data = await response.json();
        favoritesList.innerHTML = '';

        if (!Array.isArray(data) || data.length === 0) {
            favoritesList.innerHTML = "<p>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ.</p>";
            return;
        }

        data.forEach(fav => {
            if (!fav.medicine) return; 

            let li = document.createElement("li");
            li.innerHTML = `
                <img src="${fav.medicine.image_url || 'https://via.placeholder.com/100'}" 
                     alt="${fav.medicine.name}" 
                     style="width: 80px; height: 100px;" 
                     onerror="this.onerror=null; this.src='https://via.placeholder.com/100';">
                <p><b>${fav.medicine.name}</b> - ${fav.medicine.description} 
                (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${fav.medicine.category}, –¶–µ–Ω–∞: KZT ${fav.medicine.price})</p>
                <button onclick="removeFromFavorites(${fav.id})">–£–¥–∞–ª–∏—Ç—å</button>
            `;
            favoritesList.appendChild(li);
        });
    } catch (error) {
        console.error(" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", error);
    }
}

// üåü –£–¥–∞–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async function removeFromFavorites(favoriteId) {
    try {
        let response = await fetch(`/favorites/${favoriteId}`, {
            method: 'DELETE'
        });

        let data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!");
        }

        alert(data.message);
        loadFavorites(); 
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!");
    }
}

  
// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
function checkAuthStatus() {
    const userId = localStorage.getItem("user_id");
    const authButtons = document.querySelector(".auth-buttons");

    if (userId) {
        authButtons.innerHTML = `
            <button class="profile-btn" onclick="showProfile()">–ü—Ä–æ—Ñ–∏–ª—å</button>
            <button class="logout-btn" onclick="logoutUser()">–í—ã–π—Ç–∏</button>
        `;
        loadUserProfile(); 
    } else {
        authButtons.innerHTML = `
            <button class="login-btn" onclick="toggleModal('login-modal')">–í–æ–π—Ç–∏</button>
            <button class="register-btn" onclick="toggleModal('register-modal')">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
        `;
        document.getElementById("user-info").textContent = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã";
    }
}



function showProfile() {
    
    toggleModal('profile-modal');
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    loadUserProfileModal();
}
async function loadUserProfileModal() {
    const userId = localStorage.getItem("user_id");
    console.log("loadUserProfileModal: userId =", userId); 

    if (!userId) {
        document.getElementById("profile-details").textContent = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã";
        return;
    }

    try {
        console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: `/profile?user_id=" + userId + "`");
        const response = await fetch(`/profile?user_id=${userId}`);
        console.log("Response status:", response.status);

        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
        }

        const data = await response.json();
        console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:", data);

        document.getElementById("profile-details").innerHTML = `
            <p><strong>–ò–º—è:</strong> ${data.first_name} ${data.last_name}</p>
            <p><strong>–ì–æ—Ä–æ–¥:</strong> ${data.city}</p>
            ${data.email ? `<p><strong>Email:</strong> ${data.email}</p>` : ""}
            ${data.phone ? `<p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${data.phone}</p>` : ""}
        `;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è (modal):", error);
        document.getElementById("profile-details").textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.";
    }
}

async function loadUserProfile() {
    const userId = localStorage.getItem("user_id");
    if (!userId) {
        document.getElementById("user-info").textContent = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã";
        return;
    }

    try {
        const response = await fetch(`/profile?user_id=${userId}`);
        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
        }

        const data = await response.json();
        console.log("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:", data);

    
        document.getElementById("user-info").innerHTML = `<strong>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.first_name} ${data.last_name}!</strong>`;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
        document.getElementById("user-info").textContent = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è";
    }
}
 
// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function loadUserProfileModal() {
    const userId = localStorage.getItem("user_id");
    if (!userId) {
        document.getElementById("profile-details").innerHTML = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã";
        return;
    }

    try {
        const response = await fetch(`/profile?user_id=${userId}`);
        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
        }

        const data = await response.json();

        document.getElementById("profile-first-name").textContent = data.first_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        document.getElementById("profile-last-name").textContent = data.last_name || "";
        document.getElementById("profile-email").textContent = data.email || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        document.getElementById("profile-phone").textContent = data.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        document.getElementById("profile-city").textContent = data.city || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
        document.getElementById("profile-details").innerHTML = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è";
    }
}


function enableProfileEditing() {
    document.getElementById("edit-profile-form").style.display = "block";

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const profileText = document.getElementById("profile-details").innerText;
    const nameMatch = profileText.match(/–ò–º—è:\s(.*)/);
    const emailMatch = profileText.match(/Email:\s(.*)/);
    const phoneMatch = profileText.match(/–¢–µ–ª–µ—Ñ–æ–Ω:\s(.*)/);

    document.getElementById("edit-first-name").value = nameMatch ? nameMatch[1].split(" ")[0] : "";
    document.getElementById("edit-last-name").value = nameMatch ? nameMatch[1].split(" ")[1] : "";
    document.getElementById("edit-email").value = emailMatch ? emailMatch[1] : "";
    document.getElementById("edit-phone").value = phoneMatch ? phoneMatch[1] : "";
}

async function saveProfileChanges() {
    const userId = localStorage.getItem("user_id");
    if (!userId) return alert("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");

    const firstName = document.getElementById("edit-first-name").value.trim();
    const lastName = document.getElementById("edit-last-name").value.trim();
    const email = document.getElementById("edit-email").value.trim();
    const phone = document.getElementById("edit-phone").value.trim();

    if (!firstName || !lastName || !email || !phone) {
        alert("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!");
        return;
    }

    try {
        const response = await fetch(`/update-profile`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, first_name: firstName, last_name: lastName, email, phone })
        });

        const data = await response.json();
        if (response.ok) {
            alert("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!");
            loadUserProfile();
            toggleModal("profile-modal");
        } else {
            alert("–û—à–∏–±–∫–∞: " + data.error);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error);
        alert("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!");
    }
}



async function saveProfileChanges() {
    const userId = parseInt(localStorage.getItem("user_id"), 10);
    if (!userId || isNaN(userId)) {
        alert("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
        return;
    }

    const firstName = document.getElementById("edit-first-name").value.trim();
    const lastName = document.getElementById("edit-last-name").value.trim();
    const email = document.getElementById("edit-email").value.trim();
    const phone = document.getElementById("edit-phone").value.trim();

    let updatedData = { user_id: userId };
    if (firstName) updatedData.first_name = firstName;
    if (lastName) updatedData.last_name = lastName;
    if (email) updatedData.email = email;
    if (phone) updatedData.phone = phone;

    if (Object.keys(updatedData).length === 1) {
        alert("–í—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è!");
        return;
    }

    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
    console.log("–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ JSON:", JSON.stringify(updatedData, null, 2));

    try {
        const response = await fetch(`/update-profile`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedData)
        });

        const data = await response.json();
        console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

        if (response.ok) {
            alert("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!");
            loadUserProfile(); 
            toggleModal("profile-modal");
        } else {
            alert("–û—à–∏–±–∫–∞: " + data.error);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error);
        alert("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!");
    }
}


function deleteProfile() {
    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?")) {
        const userId = localStorage.getItem("user_id"); // Adjust based on how you store user ID
        if (!userId) {
            alert("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id.");
            return;
        }

        fetch('/delete-profile', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: parseInt(userId) })
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                alert("–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω!");
                localStorage.clear(); // Clear user data from local storage
                window.location.href = "/"; // Redirect to homepage
            } else {
                alert("–û—à–∏–±–∫–∞: " + data.error);
            }
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
    }
}
  


const faqQuestions = document.querySelectorAll('.faq-question');
faqQuestions.forEach(question => {
  question.addEventListener('click', function() {
    this.classList.toggle('active');
    const answer = this.nextElementSibling;
    answer.classList.toggle('open');
  });
});















  

