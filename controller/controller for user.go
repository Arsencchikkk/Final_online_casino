package controllers

import (
	"Handbook/config"
	"Handbook/models"
	"log"
	"net/http"
	"regexp"
	"strconv"

	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/bcrypt"
)

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func RegisterUser(c *gin.Context) {
	var input struct {
		FirstName string `json:"first_name"`
		LastName  string `json:"last_name"`
		Email     string `json:"email"`
		Phone     string `json:"phone"`
		City      string `json:"city"`
		Password  string `json:"password"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: " + err.Error()})
		return
	}

	var existingUser models.User
	if err := config.DB.Where("email = ? OR phone = ?", input.Email, input.Phone).First(&existingUser).Error; err == nil {
		c.JSON(http.StatusConflict, gin.H{"error": "–≠—Ç–æ—Ç email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"})
		return
	}

	if matched, _ := regexp.MatchString(`^\+7\d{10}$`, input.Phone); !matched {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7XXXXXXXXXX"})
		return
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è"})
		return
	}

	user := models.User{
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
		Phone:     input.Phone,
		City:      input.City,
		Password:  string(hashedPassword),
	}

	if err := config.DB.Create(&user).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"})
}

func LoginUser(c *gin.Context) {
	var input struct {
		Login    string `json:"login"`
		Password string `json:"password"`
	}

	var user models.User

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	log.Println("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:", input.Login)

	if err := config.DB.Where("email = ? OR phone = ?", input.Login, input.Login).First(&user).Error; err != nil {
		log.Println(" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(input.Password)); err != nil {
		log.Println(" –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	log.Println(" –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω:", user.ID)
	c.JSON(http.StatusOK, gin.H{
		"message": "Login successful",
		"user_id": user.ID,
	})
}

func GetProfile(c *gin.Context) {
	userIDStr := c.Query("user_id")
	if userIDStr == "" {
		log.Println(" –û—à–∏–±–∫–∞: user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
		c.JSON(http.StatusBadRequest, gin.H{"error": "user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})
		return
	}

	userID, err := strconv.Atoi(userIDStr)
	if err != nil {
		log.Println(" –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id", userIDStr)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id"})
		return
	}

	var user models.User
	if err := config.DB.First(&user, userID).Error; err != nil {
		log.Println(" –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, user_id =", userID)
		c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	log.Println(" –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:", user)

	c.JSON(http.StatusOK, gin.H{
		"first_name": user.FirstName,
		"last_name":  user.LastName,
		"email":      user.Email,
		"phone":      user.Phone,
		"city":       user.City,
	})
}
func UpdateProfile(c *gin.Context) {
	var input struct {
		UserID    int     `json:"user_id"`
		FirstName *string `json:"first_name"`
		LastName  *string `json:"last_name"`
		Email     *string `json:"email"`
		Phone     *string `json:"phone"`
	}

	log.Println(" –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")

	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(" –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	log.Println(" –î–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", input)

	if input.UserID == 0 {
		log.Println(" –û—à–∏–±–∫–∞: user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω 0")
		c.JSON(http.StatusBadRequest, gin.H{"error": "user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})
		return
	}

	var user models.User
	if err := config.DB.First(&user, input.UserID).Error; err != nil {
		log.Println(" –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, user_id =", input.UserID)
		c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	if input.FirstName != nil {
		user.FirstName = *input.FirstName
	}
	if input.LastName != nil {
		user.LastName = *input.LastName
	}
	if input.Email != nil {
		user.Email = *input.Email
	}
	if input.Phone != nil {
		user.Phone = *input.Phone
	}

	if err := config.DB.Save(&user).Error; err != nil {
		log.Println(" –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"})
		return
	}

	log.Println(" –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:", user)
	c.JSON(http.StatusOK, gin.H{"message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!"})
}
func DeleteUser(c *gin.Context) {
	var input struct {
		UserID int `json:"user_id"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	log.Println("üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", input.UserID)

	if input.UserID == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})
		return
	}

	var user models.User
	if err := config.DB.First(&user, input.UserID).Error; err != nil {
		log.Println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, user_id =", input.UserID)
		c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	if err := config.DB.Delete(&user).Error; err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	log.Println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:", input.UserID)
	c.JSON(http.StatusOK, gin.H{"message": "–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω"})
}
